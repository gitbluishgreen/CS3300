//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;
import java.io.PrintWriter;
/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
class FunctionTable
{
    String label_name = null;///label name in miniIR
    String return_type;
    Hashtable<String,String> arguments = new Hashtable<String,String>();
    Hashtable<String,String> fields = new Hashtable<String,String>();
    Hashtable<String,Integer> indexes = new Hashtable<String,Integer>();
}
class ClassTable
{
    Hashtable<String,FunctionTable> functions = new Hashtable<String,FunctionTable>();
    String parent = null;//for inheritance
    Hashtable<String,String> fields = new Hashtable<String,String>();//stores the type
}
public class myDFS<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
    Hashtable<String,ClassTable> classes = new Hashtable<String,ClassTable>();
    PrintWriter pw = new PrintWriter(System.out,true);
    public boolean debug = false;
    int current_register = 5;//till R4 is taken
    int size_of_int = 4;
    int size_of_boolean = 4;
    int size_of_array = 4;
    int size_of_object_ptr = 4;
    int argument_index = 1;
    String current_class;
    String current_method;
    ClassTable class_object;
    FunctionTable function_object;
    int label_index = 1;
    int size_sum,var_ind,fun_ind,reg_num;
    int implicit = 0;
    String prior_type = null;
    int cnt;
    Hashtable<String,Pair<ArrayList<String>,ArrayList<String>>> object_table = new Hashtable<String,Pair<ArrayList<String>,ArrayList<String>>>();
    public void debug()
    {
        classes.forEach((k,v) -> {
            pw.print(k + ":\n");
            v.functions.forEach((k1,v1) -> {
                pw.println(k1);
            });
        });
    }
    int sizeof(String data_type,int flag)//this works in a C++ type style
    {
        if(data_type.equals("int"))
            return size_of_int;
        if(data_type.equals("boolean"))
            return size_of_boolean;
        if(data_type.equals("int[]"))
            return size_of_array;
        else if(flag == 0)
            return size_of_object_ptr;
        Hashtable<String,Boolean> taken = new Hashtable<String,Boolean>();//allows for variable overriding
        String t = data_type;
        size_sum = 4;
        while(t != null)
        {
            ClassTable temp = classes.get(t);
            temp.fields.forEach((k,v) -> {
                if(taken.get(k) == null)
                {
                    taken.put(k,true);
                    size_sum += sizeof(v,0);
                }});
            t = temp.parent;
        }
        return size_sum;
    }
    void build_object_table(String object_type)
    {
        if(object_type == null)
          return;
        if(object_table.get(object_type) == null)
        {
          Pair<ArrayList<String>,ArrayList<String>> p = new Pair(new ArrayList<String>(),new ArrayList<String>());
          //fields and functions
          ClassTable temp = classes.get(object_type);
          build_object_table(temp.parent);
          if(temp.parent != null)
          {
            Pair<ArrayList<String>,ArrayList<String>> p1 = object_table.get(temp.parent);
            p1.first.forEach((k) -> {
              p.first.add(k);
            });
            p1.second.forEach((k) -> {
              p.second.add(k);
            });
          }
          temp.fields.forEach((k,v) -> {
            p.first.add(object_type + "_" + k);
          });
          temp.functions.forEach((k,v) -> {
            p.second.add(object_type + "_" + k);
          });
          object_table.put(object_type,p);
        }
        else
          return;
    }
    String get_function_label(String object_type,String id)
    {
        while(object_type != null)
        {
            ClassTable t = classes.get(object_type);
            if(t.functions.get(id) != null)
                return t.functions.get(id).label_name;
            object_type = t.parent;
        }
        return null;
    }
    Pair<Pair<Integer,String>,String> get_register(String id)
    {
        //search within function, index, parent of parent etc
        Pair<Pair<Integer,String>,String> p = new Pair<Pair<Integer,String>,String>(new Pair<Integer,String>(-1,null),null);
        //search within current function object first
        if(function_object != null && function_object.fields.get(id) != null)
        {
            p.first.first = function_object.indexes.get(id);
            p.first.second = function_object.fields.get(id);
            p.second = "function";
            return p;
        }
        if(function_object != null && function_object.arguments.get(id) != null)
        {
            p.first.first = function_object.indexes.get(id);
            p.first.second = function_object.arguments.get(id);
            p.second = "function";
            return p;
        }
        Pair<ArrayList<String>,ArrayList<String>> p1 = object_table.get(current_class);
        String x = "hi";
        boolean fl = false;
        for(int i = p1.first.size()-1;i >= 0;i--)
        {
          String t = p1.second.get(i);
          if(t.endsWith(id))
          {
            x = t.substring(0,t.length() - id.length() - 1);
            fl = true;
            p.first.first = i+1;
            break;
          } 
        }
        if(fl)
        {
          p.second = "class";
          p.first.second = classes.get(x).fields.get(id);
          return p;
        }
        return null;
    }
    void get_and_print_reg(String id)
    {
        Pair<Pair<Integer,String>,String> p = get_register(id);
        if(Character.isDigit(p.first.second.charAt(0)))
            pw.println(p.first.second);
        else if(p.second.equals("class"))
        {
            int r = current_register++;
            pw.printf("BEGIN\nHLOAD TEMP %d TEMP 0 %d\nRETURN TEMP %d\nEND\n",r,p.first.first,p.first.first);
        }
        else
        {
            pw.printf("TEMP %d\n",p.first.first);
        }
    }
    int generate_object(String object_type)//must be of class type,returns the object address in a temporary register
    {
        //allocates space for the object.
        Pair<ArrayList<String>,ArrayList<String>> temp_obj = object_table.get(object_type);
        int obj_reg = current_register;
        int size = sizeof(object_type,1);
        int size_of_vt = 4 * temp_obj.second.size();
        pw.printf("MOVE TEMP %d HALLOCATE %d\n",current_register++,size);//for object pointer size
        int vtable = current_register++;
        pw.printf("MOVE TEMP %d HALLOCATE %d\n",vtable,size_of_vt);//for the temporary variables
        cnt = 1;
        temp_obj.first.forEach((k)->{
                pw.printf("HSTORE TEMP %d %d 0\n",obj_reg,cnt++);//default value of object addresses, integer and booleans is always 0
            });
        //override functions only of the said type
        cnt = 0;
        temp_obj.second.forEach((k) -> {
            pw.printf("HSTORE TEMP %d %d %s\n",vtable,cnt++,k);    
            });
        pw.printf("HSTORE TEMP %d 0 TEMP %d\n",obj_reg,vtable);
        return obj_reg;//which register was taken by the object
    }
    String get_type(String id)
    {
        if(classes.get(id) != null)
          return id;
        if(function_object != null)
        {
            if(function_object.fields.get(id) != null)
                return function_object.fields.get(id);
            else if(function_object.arguments.get(id) != null)
                return function_object.arguments.get(id);
        }
        Pair<ArrayList<String>,ArrayList<String>> p = object_table.get(current_class);
        for(int i = p.first.size()-1;i >= 0;i--)
        {
          String u = p.first.get(i);
          if(u.endsWith(id))
          {
            String cl = u.substring(0,u.length()-id.length()-1);
            return classes.get(cl).fields.get(id);
          }
        }
        return null;//class type variable itself
    }   
    public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)new Pair<Integer,String>(-1,n.tokenImage); }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      Integer argument = (Integer)argu;
      R _ret=null;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
      }
      else
      {
        classes.forEach((k,v) -> {
            build_object_table(k);
        });
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) 
   {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
          n.f0.accept(this, argu);
          Pair<Integer,String> r = (Pair<Integer,String>)n.f1.accept(this,argu);
          String class_name = r.second;
          current_class = class_name;
          class_object = new ClassTable();
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          n.f5.accept(this, argu);
          n.f6.accept(this, argu);
          n.f7.accept(this, argu);
          n.f8.accept(this, argu);
          n.f9.accept(this, argu);
          n.f10.accept(this, argu);
          Pair<Integer,String> r1 = (Pair<Integer,String>)n.f11.accept(this, argu);
          String id = r1.second;
          function_object = new FunctionTable();
          function_object.label_name = class_name + "_main";
          function_object.arguments.put(id,"String[]");
          n.f12.accept(this, argu);
          n.f13.accept(this, argu);
          n.f14.accept(this, argu);
          n.f15.accept(this, argu);
          n.f16.accept(this, argu);
          class_object.functions.put("main",function_object);
          classes.put(class_name,class_object);
      }
      else
      {
          n.f0.accept(this, argu);
          Pair<Integer,String> p1 = (Pair<Integer,String>)n.f1.accept(this, argu);
          String class_name = p1.second;
          current_class = class_name;
          class_object = classes.get(current_class);
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          n.f5.accept(this, argu);
          n.f6.accept(this, argu);
          function_object = class_object.functions.get("main");
          current_method = "main";
          n.f7.accept(this, argu);
          n.f8.accept(this, argu);
          n.f9.accept(this, argu);
          n.f10.accept(this, argu);
          n.f11.accept(this, argu);
          n.f12.accept(this, argu);
          n.f13.accept(this, argu);
          pw.println("MAIN");
          n.f14.accept(this, argu);
          n.f15.accept(this, argu);
          n.f16.accept(this, argu);
          pw.println("END");
          current_method = null;
          function_object = null;
      }
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f1.accept(this, argu);
        class_object = new ClassTable();
        current_class = p1.second;
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        classes.put(p1.second,class_object);
      }
      else
      {
        n.f0.accept(this, argu);
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f1.accept(this, argu);
        class_object = classes.get(p1.second);
        current_class = p1.second;
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) 
   {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
          n.f0.accept(this, argu);
          Pair<Integer,String> p1 = (Pair<Integer,String>)n.f1.accept(this, argu);
          current_class = p1.second;
          class_object = new ClassTable();
          n.f2.accept(this, argu);
          Pair<Integer,String> p2 = (Pair<Integer,String>)n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          n.f5.accept(this, argu);
          n.f6.accept(this, argu);
          n.f7.accept(this, argu);
          class_object.parent = p2.second;
          classes.put(current_class,class_object);
      }
      else
      {
          n.f0.accept(this, argu);
          Pair<Integer,String> p1 = (Pair<Integer,String>)n.f1.accept(this, argu);
          class_object  = classes.get(p1.second);
          current_class = p1.second;
          n.f2.accept(this, argu);
          Pair<Integer,String> p2 = (Pair<Integer,String>)n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          n.f5.accept(this, argu);
          n.f6.accept(this, argu);
          n.f7.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this, argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        if(current_method == null)
        {
            class_object.fields.put(p2.second,p1.second);
        }
        else
        {
            function_object.fields.put(p2.second,p1.second);
            function_object.indexes.put(p2.second,current_register++);//allocate registers for all these fields
        }
      }
      else
      {
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this, argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f1.accept(this, argu);
        n.f2.accept(this, argu);//temporary register allocation must happen now
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
          n.f0.accept(this, argu);
          Pair<Integer,String> p1 = (Pair<Integer,String>)n.f1.accept(this, argu);
          Pair<Integer,String> p2 = (Pair<Integer,String>)n.f2.accept(this, argu);
          function_object = new FunctionTable();
          argument_index = 1;
          current_method = p2.second;
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          n.f5.accept(this, argu);
          n.f6.accept(this, argu);
          n.f7.accept(this, argu);
          n.f8.accept(this, argu);
          n.f9.accept(this, argu);
          n.f10.accept(this, argu);
          n.f11.accept(this, argu);
          n.f12.accept(this, argu);
          class_object.functions.put(current_method,function_object);
          function_object.label_name = current_class + "_" + current_method;
          function_object.return_type = p1.second;
          function_object = null;
          current_method = null;
          return _ret;
      }
      else
      {
          n.f0.accept(this, argu);
          Pair<Integer,String> p1 = (Pair<Integer,String>)n.f1.accept(this, argu);
          Pair<Integer,String> p2 = (Pair<Integer,String>)n.f2.accept(this, argu);
          function_object = class_object.functions.get(p2.second);
          current_method = p2.second;
          pw.print(function_object.label_name);
          pw.printf(" [%d]\nBEGIN\n",function_object.arguments.size());
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          n.f5.accept(this, argu);
          n.f6.accept(this, argu);
          n.f7.accept(this, argu);
          n.f8.accept(this, argu);
          n.f9.accept(this, argu);
          pw.print("RETURN ");
          n.f10.accept(this, argu);
          pw.println("END");
          n.f11.accept(this, argu);
          n.f12.accept(this, argu);
          current_method = null;
          function_object = null;
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) 
   {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this, argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f1.accept(this, argu);
        function_object.arguments.put(p2.second,p1.second);
        function_object.indexes.put(p2.second,argument_index++);
      }
      else
      {
        n.f0.accept(this,argu);
        n.f1.accept(this,argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)new Pair<Integer,String>(0,"int[]");
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)new Pair<Integer,String>(0,"boolean");
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)new Pair<Integer,String>(0,"int");
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
    }
    else
    {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
    }
    return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
      }
      else
      {
        Pair<Integer,String> p0 = (Pair<Integer,String>)n.f0.accept(this, argu);
        Pair<Pair<Integer,String>,String> x = get_register(p0.second);
        if(x.second.equals("function"))
        {
            pw.printf("MOVE TEMP %d ",x.first.first);
            n.f1.accept(this, argu);
            Pair<Integer,String> p1 = (Pair<Integer,String>)n.f2.accept(this, argu);
            n.f3.accept(this, argu);
        }
        else//should be a member of the current object (TEMP 0) in the function
        {
            pw.printf("HSTORE TEMP 0 %d ",x.first.first);//which register must I go to?
            n.f1.accept(this,argu);
            n.f2.accept(this,argu);
            n.f3.accept(this,argu);
        }
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          n.f5.accept(this, argu);
          n.f6.accept(this, argu);
      }
      else
      {
          Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this, argu);
          Pair<Pair<Integer,String>,String> p2 = get_register(p1.second);
          n.f1.accept(this, argu);
          if(p2.second.equals("function"))
          {
            pw.printf("MOVE TEMP %d PLUS TEMP %d ",p2.first.first,p2.first.first);
            n.f2.accept(this,argu);
            n.f3.accept(this,argu);
            n.f4.accept(this,argu);
            pw.printf("HSTORE TEMP %d 1 ",p2.first.first);
            n.f5.accept(this,argu);
            n.f6.accept(this,argu);
          }
          else//object address and then array access
          {
            pw.printf("HLOAD TEMP %d TEMP 0 %d\n",current_register++,p2.first.first);
            int a_reg = current_register-1;
            pw.printf("MOVE TEMP %d PLUS TEMP %d ",a_reg,a_reg);//this is the register for the array
            n.f2.accept(this,argu);
            n.f3.accept(this,argu);
            n.f4.accept(this,argu);
            pw.printf("HSTORE TEMP %d 1 ",a_reg);
            n.f5.accept(this,argu);
            n.f6.accept(this,argu);
          }
      }   
        return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) 
   {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
      }
      else
      {
        //create labels to jump
          n.f0.accept(this, argu);
          int reg = current_register++;
          pw.printf("MOVE TEMP %d ",reg);
          n.f1.accept(this, argu);
          int lb = label_index++;
          pw.printf("CJUMP TEMP %d L%d\n",reg,lb);
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          pw.printf("L%d NOOP\n",lb);

      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        int cur = current_register++;
        pw.printf("MOVE TEMP %d ",cur);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        int l1 = label_index++;
        int l2 = label_index++;
        pw.printf("CJUMP TEMP %d L%d\n",cur,l1);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        pw.printf("JUMP L%d\n",l2);
        pw.printf("L%d NOOP\n",l1);
        n.f6.accept(this, argu);
        pw.printf("L%d NOOP\n",l2);
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      { 
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        int reg = current_register++;
        int lb1 = label_index++;
        pw.printf("L%d\n",lb1);
        pw.printf("MOVE TEMP %d ",reg);
        n.f2.accept(this,argu);
        n.f3.accept(this,argu);
        int lb2 = label_index++;
        pw.printf("CJUMP TEMP %d L%d\n",reg,lb2);
        n.f4.accept(this,argu);
        pw.printf("JUMP L%d\nL%d NOOP\n",lb1,lb2);
      }
    return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        pw.print("PRINT ");
        n.f2.accept(this,argu);
        n.f3.accept(this,argu);
        n.f4.accept(this,argu);
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
      }
      else
      {
        pw.print("TIMES ");
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this,argu);
        n.f1.accept(this,argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f2.accept(this,argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
      }
      else
      {
        pw.print("NE PLUS ");
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this,argu);
        n.f1.accept(this,argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f2.accept(this,argu);
        pw.println("0");
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
      }
      else
      {
        pw.print("LE ");
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this,argu);
        n.f1.accept(this,argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f2.accept(this,argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
      }
      else
      {
        pw.print("NE ");
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this,argu);
        n.f1.accept(this,argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f2.accept(this,argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
      }
      else
      {
        pw.print("PLUS ");
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this,argu);
        n.f1.accept(this,argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f2.accept(this,argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
      }
      else
      {
        pw.print("MINUS ");
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this,argu);
        n.f1.accept(this,argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f2.accept(this,argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
      }
      else
      {
        pw.print("TIMES ");
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this,argu);
        n.f1.accept(this,argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f2.accept(this,argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
      }
      else
      {
        pw.print("DIV ");
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this,argu);
        n.f1.accept(this,argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f2.accept(this,argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this,argu);
      }
      else
      {
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this,argu);
        Pair<Pair<Integer,String>,String> p3 = get_register(p1.second);
        if(p1.first == -1)
        {
          if(p3.second.equals("class"))
          {
            int rg = current_register++;
            pw.printf("BEGIN\n");
            pw.printf("MOVE TEMP %d TEMP 0 %d\n",rg,p3.first.first);
            pw.printf("MOVE TEMP %d PLUS TEMP %d ",rg,rg);
            n.f1.accept(this,argu);
            Pair<Integer,String> p = (Pair<Integer,String>)n.f2.accept(this,argu);
            n.f3.accept(this,argu);
            pw.printf("HLOAD TEMP %d TEMP %d 1\nRETURN TEMP %d \nEND\n",rg,rg,rg);
          }
          else
          {
            pw.printf("BEGIN\nMOVE TEMP %d PLUS TEMP %d ",p3.first.first,p3.first.first);
            n.f1.accept(this,argu);
            Pair<Integer,String> p = (Pair<Integer,String>)n.f2.accept(this,argu);
            n.f3.accept(this,argu);
            pw.printf("HLOAD TEMP %d TEMP %d 1\nRETURN TEMP %d\nEND\n",p3.first.first,p3.first.first,p3.first.first);
          }
        }
        else
        {
          pw.printf("BEGIN\nMOVE TEMP %d PLUS TEMP %d ",p1.first);
        }
      }
      return _ret;
    }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
      }
      else
      {
        Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this,argu);
        if(p1.first != -1)
        {
            int r = current_register++;
            pw.printf("BEGIN\nHLOAD TEMP %d TEMP %d 0\nRETURN TEMP %d\nEND\n",r,p1.first,r);
        }
        else
        {
            Pair<Pair<Integer,String>,String> p2 = get_register(p1.second);//identifier
            if(p2.second.equals("class"))
            {
                int r = current_register++;
                pw.printf("BEGIN\nHLOAD TEMP %d TEMP 0 %d\n",r,p2.first.first);
                pw.printf("HLOAD TEMP %d TEMP %d 0\nRETURN TEMP %d\nEND\n",r,r,r);
            }
            else
            {
                pw.printf("BEGIN\nHLOAD TEMP %d TEMP %d 0\nRETURN TEMP %d\nEND\n",p2.first.first,p2.first.first,p2.first.first);
            }
        }
        n.f1.accept(this,argu);
        n.f2.accept(this,argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      int t_reg;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
      }
      else
      {
        t_reg = current_register++;
        int u_reg = current_register++;
        pw.printf("BEGIN\nMOVE TEMP %d CALL BEGIN\nMOVE TEMP %d ",t_reg,u_reg);
        Pair<Integer,String> p1  = (Pair<Integer,String>)n.f0.accept(this,argu);
        p1.second = get_type(p1.second);
        n.f1.accept(this,argu);
        Pair<Integer,String> p2 = (Pair<Integer,String>)n.f2.accept(this,argu);
        int ind = -1;
        String rt = "10";
        //pw.println("Primary expression is "+p2.second);
        Pair<ArrayList<String>,ArrayList<String>> p = object_table.get(p1.second);
        for(int i = p.second.size()-1;i >= 0; i--)
        {
          String cu = p.second.get(i);
          if(cu.endsWith(p2.second))
          {
            ind = i;
            String v = cu.substring(0,cu.length()-p2.second.length()-1);
            rt = classes.get(v).functions.get(p2.second).return_type;
            break;
          }
        }
        int r1 = current_register++;
        int vt = current_register++;
        pw.printf("HLOAD TEMP %d TEMP %d 0\n",vt,u_reg);
        pw.printf("HLOAD TEMP %d TEMP %d %d\nRETURN TEMP %d\nEND\n",r1,vt,ind,r1);
        pw.printf("(TEMP %d ",u_reg);//object address has to be passed
        n.f3.accept(this,argu);
        n.f4.accept(this,argu);
        n.f5.accept(this,argu);
        pw.printf(")RETURN TEMP %d\nEND\n",t_reg);
        return (R) new Pair<Integer,String>(t_reg,rt);
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      Pair<Integer,String> p = (Pair<Integer,String>)n.f0.accept(this, argu);
      if(n.f0.which == 3 && Integer.valueOf((Integer)argu) == 1)
        get_and_print_reg(p.second);
      return (R)p;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      Pair<Integer,String> p1 = (Pair<Integer,String>)n.f0.accept(this, argu);
      if(Integer.valueOf((Integer)argu) == 1)
        pw.print(p1.second + " ");
      return (R)p1;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(Integer.valueOf((Integer)argu) == 1)
        pw.print("1 ");
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(Integer.valueOf((Integer)argu) == 1)
        pw.print("0 ");
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;//pair of string and int
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(Integer.valueOf((Integer)argu) == 1)
      {
        pw.printf("TEMP 0\n");
      }
      return (R) new Pair<Integer,String>(0,current_class);//this should have reg 0 wrt function address
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
      }
      else
      {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
          n.f2.accept(this, argu);
          int r1 = current_register++;
          pw.printf("BEGIN\nMOVE TEMP %d ",r1);
          n.f3.accept(this, argu);
          n.f4.accept(this, argu);
          int r2 = current_register++;
          pw.printf("MOVE TEMP %d HALLOCATE TIMES 4 PLUS 1 TEMP %d\n",r2,r1);
          pw.printf("HSTORE TEMP %d 0 TEMP %d\n",r2,r1);
          int lb1 = label_index++;
          int lb2 = label_index++;
          int r3 = current_register++;
          pw.printf("L%d\nCJUMP NE TEMP %d 0 L%d\nMOVE TEMP %d PLUS TEMP %d TEMP %d\nHSTORE TEMP %d 0 0\nMOVE TEMP %d MINUS TEMP %d 1\nJUMP L%d\n",lb1,r1,lb2,r3,r1,r2,r3,r1,r1,lb1);
          pw.printf("L%d NOOP \nRETURN TEMP %d\nEND\n",lb2,r2);
          return (R)new Pair<Integer,String>(r2,null);
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) 
   {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        pw.println("BEGIN");
        Pair<Integer,String> p = (Pair<Integer,String>)n.f1.accept(this,argu);
        int rg = current_register++;
        if(prior_type == null)
            prior_type = p.second;
        rg = generate_object(p.second);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        p.first = rg;
        pw.printf("RETURN TEMP %d\nEND\n",rg);
        return (R)p;
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) 
   {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
      }
      else
      {
        pw.print("MINUS 1 ");
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) 
   {
      R _ret=null;
      Integer argument = (Integer)argu;
      if(Integer.valueOf(argument) == 0)
      {
        n.f0.accept(this, argu);
        _ret = n.f1.accept(this, argu);
        n.f2.accept(this, argu);

      }
      else
      {
        n.f0.accept(this, argu);
        _ret = n.f1.accept(this,argu);
        n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   //unused production rules
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }
}
